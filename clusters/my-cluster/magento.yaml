--- 
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata: 
  name: magento
  namespace: kube-system
spec: 
  chart: 
    spec: 
      chart: magento
      sourceRef: 
        kind: HelmRepository
        name: magento
        namespace: kube-system
      version: ">=19.0.8"
  install: 
    disableWaitForJobs: true
  interval: 1m0s
  rollback: 
    disableWaitForJobs: true
  upgrade: 
    disableWaitForJobs: true
  values: 
    affinity: {}
    allowEmptyPassword: false
    args: []
    autoscaling: 
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    certificates: 
      args: []
      command: []
      customCAs: []
      customCertificate: 
        certificateLocation: /etc/ssl/certs/ssl-cert-snakeoil.pem
        certificateSecret: ""
        chainLocation: /etc/ssl/certs/mychain.pem
        chainSecret: 
          key: ""
          name: ""
        keyLocation: /etc/ssl/private/ssl-cert-snakeoil.key
      extraEnvVars: []
      extraEnvVarsCM: ""
      extraEnvVarsSecret: ""
      image: 
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r250
    command: []
    commonAnnotations: {}
    commonLabels: {}
    containerPorts: 
      http: 8080
      https: 8443
    containerSecurityContext: 
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    elasticsearch: 
      coordinating: 
        replicas: 1
      data: 
        replicas: 1
      enabled: true
      master: 
        replicas: 1
      sysctlImage: 
        enabled: true
    existingSecret: ""
    externalDatabase: 
      database: bitnami_magento
      host: ""
      password: ""
      port: 3306
      user: bn_magento
    externalElasticsearch: 
      host: ""
      port: ""
    extraContainerPorts: []
    extraDeploy: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    fullnameOverride: ""
    global: 
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
    hostAliases: 
      - 
        hostnames: 
          - status.localhost
        ip: "127.0.0.1"
    image: 
      debug: true
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/magento
      tag: 2.4.3-debian-10-r63
    ingress: 
      annotations: {}
      apiVersion: ""
      enabled: false
      extraHosts: []
      extraTls: []
      hostname: magento.local
      path: /
      pathType: ImplementationSpecific
      secrets: []
      tls: false
    initContainers: []
    kubeVersion: ""
    lifecycleHooks: {}
    livenessProbe: 
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 300
      path: /index.php
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    magentoAdminUri: ""
    magentoDeployStaticContent: false
    magentoEmail: user@example.com
    magentoExtraInstallArgs: ""
    magentoFirstName: ""
    magentoHost: ""
    magentoLastName: ""
    magentoMode: ""
    magentoPassword: abc123
    magentoSkipInstall: false
    magentoSkipReindex: false
    magentoUseHttps: false
    magentoUseSecureAdmin: false
    magentoUsername: user
    mariadb: 
      architecture: standalone
      auth: 
        database: bitnami_magento
        password: abc123
        rootPassword: abc123
        username: bn_magento
      enabled: true
      image: 
        registry: docker.io
        repository: bitnami/mariadb
        tag: 10.3.32-debian-10-r2
      primary: 
        persistence: 
          accessModes: 
            - ReadWriteOnce
          enabled: false
          existingClaim: ""
          hostPath: ""
          size: 1Gi
          storageClass: ""
    metrics: 
      enabled: false
      image: 
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/apache-exporter
        tag: 0.10.1-debian-10-r52
      resources: 
        limits: {}
        requests: {}
      service: 
        annotations: 
          prometheus.io/port: "{{ .Values.metrics.service.port }}"
          prometheus.io/scrape: "true"
        port: 9117
        type: ClusterIP
    nameOverride: ""
    networkPolicy: 
      egressRules: 
        customRules: {}
        denyConnectionsToExternal: false
      enabled: false
      ingress: 
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      ingressRules: 
        accessOnlyFrom: 
          enabled: false
          namespaceSelector: {}
          podSelector: {}
        backendOnlyAccessibleByFrontend: false
        customBackendSelector: {}
        customRules: {}
      metrics: 
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    nodeAffinityPreset: 
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence: 
      accessMode: ReadWriteOnce
      enabled: true
      existingClaim: ""
      hostPath: ""
      size: 1Gi
      storageClass: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext: 
      enabled: true
      fsGroup: 1001
    readinessProbe: 
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      path: /index.php
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 3
    replicaCount: 1
    resources: 
      limits: {}
      requests: {}
    service: 
      clusterIP: ""
      externalTrafficPolicy: Cluster
      httpsPort: 8443
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts: 
        http: ""
        https: ""
      port: 8080
      type: ClusterIP
    sessionAffinity: None
    sidecars: []
    startupProbe: 
      enabled: false
      failureThreshold: 60
      initialDelaySeconds: 0
      path: /index.php
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 3
    tolerations: []
    updateStrategy: 
      type: RollingUpdate
    volumePermissions: 
      enabled: false
      image: 
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 10-debian-10-r250
      resources: 
        limits: {}
        requests: {}
